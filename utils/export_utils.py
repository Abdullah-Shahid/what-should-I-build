import io
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
import logging

def generate_pdf(idea_entry: dict) -> bytes:
    """Generate PDF export of project ideas"""
    try:
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#6366F1')
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.HexColor('#1E293B')
        )
        
        body_style = ParagraphStyle(
            'CustomBody',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            textColor=colors.HexColor('#1E293B')
        )
        
        story = []
        
        # Title
        story.append(Paragraph("What Should I Build? - Project Ideas", title_style))
        story.append(Spacer(1, 20))
        
        # User info
        story.append(Paragraph("Generated Project Ideas", heading_style))
        story.append(Paragraph(f"<b>Skills:</b> {idea_entry['skills']}", body_style))
        story.append(Paragraph(f"<b>Interests:</b> {idea_entry['interests']}", body_style))
        story.append(Paragraph(f"<b>Experience Level:</b> {idea_entry['experience_level'].title()}", body_style))
        story.append(Paragraph(f"<b>Project Type:</b> {idea_entry['project_type'].title()}", body_style))
        story.append(Paragraph(f"<b>Generated:</b> {idea_entry['timestamp']}", body_style))
        story.append(Spacer(1, 20))
        
        # Project ideas
        for i, idea in enumerate(idea_entry['ideas'], 1):
            story.append(Paragraph(f"Project {i}: {idea['name']}", heading_style))
            
            if idea['description']:
                story.append(Paragraph(f"<b>Description:</b> {idea['description']}", body_style))
            
            if idea['technologies']:
                story.append(Paragraph(f"<b>Technologies:</b> {idea['technologies']}", body_style))
            
            if idea['time']:
                story.append(Paragraph(f"<b>Estimated Time:</b> {idea['time']}", body_style))
            
            if idea['learning']:
                story.append(Paragraph(f"<b>Learning Outcomes:</b> {idea['learning']}", body_style))
            
            if idea['difficulty']:
                story.append(Paragraph(f"<b>Difficulty:</b> {idea['difficulty']}", body_style))
            
            story.append(Spacer(1, 15))
        
        # Footer
        story.append(Spacer(1, 30))
        story.append(Paragraph("Generated by What Should I Build? - AI-Powered Project Ideas", 
                             ParagraphStyle('Footer', parent=styles['Normal'], 
                                          fontSize=9, alignment=TA_CENTER, 
                                          textColor=colors.HexColor('#8B5CF6'))))
        
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
        
    except Exception as e:
        logging.error(f"Error generating PDF: {str(e)}")
        # Return a simple error PDF
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = [Paragraph("Error generating PDF export", styles['Title'])]
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()

def generate_markdown(idea_entry: dict) -> str:
    """Generate Markdown export of project ideas"""
    try:
        md_content = []
        
        # Title
        md_content.append("# What Should I Build? - Project Ideas\n")
        
        # User info
        md_content.append("## Generated Project Ideas\n")
        md_content.append(f"**Skills:** {idea_entry['skills']}\n")
        md_content.append(f"**Interests:** {idea_entry['interests']}\n")
        md_content.append(f"**Experience Level:** {idea_entry['experience_level'].title()}\n")
        md_content.append(f"**Project Type:** {idea_entry['project_type'].title()}\n")
        md_content.append(f"**Generated:** {idea_entry['timestamp']}\n\n")
        
        # Project ideas
        for i, idea in enumerate(idea_entry['ideas'], 1):
            md_content.append(f"## Project {i}: {idea['name']}\n")
            
            if idea['description']:
                md_content.append(f"**Description:** {idea['description']}\n\n")
            
            if idea['technologies']:
                md_content.append(f"**Technologies:** {idea['technologies']}\n\n")
            
            if idea['time']:
                md_content.append(f"**Estimated Time:** {idea['time']}\n\n")
            
            if idea['learning']:
                md_content.append(f"**Learning Outcomes:** {idea['learning']}\n\n")
            
            if idea['difficulty']:
                md_content.append(f"**Difficulty:** {idea['difficulty']}\n\n")
            
            md_content.append("---\n\n")
        
        # Footer
        md_content.append("*Generated by What Should I Build? - AI-Powered Project Ideas*\n")
        
        return ''.join(md_content)
        
    except Exception as e:
        logging.error(f"Error generating Markdown: {str(e)}")
        return f"# Error\n\nError generating Markdown export: {str(e)}\n"
